/*******************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright 1997-2002, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: read_openPMD
*
* %I
*
* Written by: Shervin Nourbakhsh (ILL) & Mads Bertelsen (ESS)
* Date: July 2020
* Origin: ILL
*
* 
*
* %D
* 
*
* 
* 
*
*
* %P
* Input parameters:
*
* %E
*******************************************************************************/

DEFINE COMPONENT read_openPMD
DEFINITION PARAMETERS (string input, polarisationuse=0, doubleprec=0, verbose=0, int userflag=0)
SETTING PARAMETERS (string filename=0, string userflagcomment="", merge_mpi=1, keep_mpi_unmerged=0)
OUTPUT PARAMETERS (outputfile,particle,Particle, userflagenabled)
DEPENDENCY "-L. -lhellowrap -Lbuild/lib/"
//DEPENDENCY "-I@MCCODE_LIB@/libs/mcpl -L@MCCODE_LIB@/libs/mcpl -lmcpl"


SHARE
%{
#include "wrap.h"
  /* #include <mcpl.h> */
/*   int mcpl_file_exist (char *filename) */
/*   { */
/*     struct stat   buffer; */
/*     return (stat (filename, &buffer) == 0); */
/*   } */
%}

DECLARE
%{
  //  printf("[DECLARE] declaring openPMD_io\n");
  openPMD_io *op = NULL;
  unsigned long long int nparticles=0;
  //mcpl_outfile_t outputfile;
  // mcpl_particle_t *particle,Particle;
  // int userflagenabled;
%}
  
/* Neutron parameters: (x,y,z,vx,vy,vz,t,sx,sy,sz,p) */
INITIALIZE
%{
  printf("Num particles: %d\n", mcget_ncount()); 
  printf("[INITIALIZE] new openPMD_write\n");
  //if(strcmp(outfile,'\0'))
  //sprintf(outfile, "%s", NAME_CURRENT_COMP);
  printf("Current component: %s\n", NAME_CURRENT_COMP);
  
  printf("Will read file: %s\n", input);
  op = openPMD_read(input, // name of the output file
		            MCCODE_NAME,
		            MCCODE_VERSION,
		            mcinstrument_name,
		            NAME_CURRENT_COMP);

  // the file format could be deduced from the file extension
  // op, output format, , max number of neutrons
  nparticles = init_read(op, HDF5, mcget_ncount());  /* JSON or HDF5: enum*/
  if(nparticles<mcget_ncount()){
	  printf("[WARNING] Number of particles in file %s < than requested: %llu < %llu\n",
		 input,
		 nparticles,
		 mcget_ncount());
	  //	  mcset_ncount(nparticles);	  
  } else nparticles = mcget_ncount();

#if defined (USE_MPI)
  //    ismpislavegit diff = mpi_node_rank;
    MPI_MASTER(
	       fprintf(stdout, " x %i MPI nodes = %ld neutrons total\n",mpi_node_count,mpi_node_count*repeat_cnt*nparticles);
	       );
    mcset_ncount(mpi_node_count * nparticles);
#else
  fprintf(stdout, " neutrons total\n\n");
  mcset_ncount(nparticles);
#endif

  //read_neutrons=0;
  //used_neutrons=0;
  if (verbose==1) {
	  printf("read_openPMD_input verbose mode - outputting data on the 10 first read neutrons:\n");
  }

  printf("[INITIALIZE] Init done: %llu\n", mcget_ncount());
%}

TRACE
%{
  /*printf("[TRACE] trace particle\n");*/
  /* printf("Num particles: %u\n", num_particles()); */
  trace_read(op, &x, &y, &z,
  	          &sx, &sy, &sz,
  	          &vx, &vy, &vz,
  	          &t, &p); //, userflag);

  if(verbose==1 && mcget_run_num()<10 ){
	  
	  printf("---------- #%llu\n"
		 "position     = %10.4f\t%10.4f\t%10.4f\n"
		 "direction    = %10.4f\t%10.4f\t%10.4f\n"
		 "polarization = %10.4f\t%10.4f\t%10.4f\n"
		 "               %10.4f\t%10.4f\n",
		 mcget_run_num(),
		 x, y, z,
		 vx, vy, vz,
		 sx, sy, sz,
		 t, p);
  }
  SCATTER;
 
%}

SAVE
%{
  printf("[SAVE] \n");
  //save(op);

/*   #ifdef USE_MPI */
/*   if (merge_mpi && mpi_node_count > 1) { */
/*     mcpl_close_outfile(outputfile); */
/*   } else { */
/*     mcpl_closeandgzip_outfile(outputfile); */
/*   } */
/* #else */
/*   mcpl_closeandgzip_outfile(outputfile); */
/* #endif */

  %}
MCDISPLAY
%{
  /* A bit ugly; hard-coded dimensions. */
  
  line(0,0,0,0.2,0,0);
  line(0,0,0,0,0.2,0);
  line(0,0,0,0,0,0.2);
%}

END
